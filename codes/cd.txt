#include<iostream>
using namespace std;

int min(int x,int y){
	return x<y?x:y;
}

int max(int x,int y){
	return x>y?x:y;
}

struct node{
	int x;
	int y;
	int z;
	int d=0;
};
struct dist{
	int x=0;
	int y=0;
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int l1,l2,l3;
		cin>>l1>>l2>>l3;

		int s1,s2,s3;
		cin>>s1>>s2>>s3;


		node q[1000];
		dist visited[l1+1][l2+1][l3+1];

		for(int i=0;i<l1+1;i++)
			for(int j=0;j<l2+1;j++)
				for(int k=0;k<l3+1;k++)
			visited[i][j][k].x=0;

		int head=0;
		int tail=0;

		q[tail].x=s1;
		q[tail].y=s2;
		q[tail].z=s3;
		q[tail].d=0;
		tail++;

		while(head!=tail)
		{
			node curr=q[head];
			//cout<<"POPPED"<<"["<<curr.x<<","<<curr.y<<","<<curr.z<<"]"<<"at depth "<<q[tail].d<<endl;
            visited[curr.x][curr.y][curr.z].x=1;
			visited[curr.x][curr.y][curr.z].y=curr.d+1;
			head++;
            //cout<<"-----" <<curr.x <<"-----" << curr.y <<"-----" << curr.z <<"-----" << curr.d <<endl;  
			//cout<<"found "<<min(curr.z+curr.x,l1)<<curr.y<<max(0,curr.x+curr.z-l1)]
			if(!visited[min(curr.z+curr.x,l1)][curr.y][max(0,curr.x+curr.z-l1)].x)
			{
    			q[tail].x=min(curr.z+curr.x,l1);
	    		q[tail].y=curr.y;
		    	q[tail].z=max(0,curr.z+curr.x-l1);
			    q[tail].d=curr.d+1;
			    visited[q[tail].x][q[tail].y][q[tail].z].x=1;
		        //	cout<<"-----------1"<<endl;
		        //	cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
			    tail++;
		    }
			if(!visited[min(curr.y+curr.x,l1)][max(0,curr.y+curr.x-l1)][curr.z].x)
			{
    			q[tail].x=min(curr.y+curr.x,l1);
	    		q[tail].y=max(0,curr.y+curr.x-l1);
		    	q[tail].z=curr.z;
			    q[tail].d=curr.d+1;
    			visited[q[tail].x][q[tail].y][q[tail].z].x=1;
	    	    //	cout<<"-----------2"<<endl;
	    	    //	cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
		    	tail++;
		    }


			if(!visited[max(0,curr.x+curr.y-l2)][min(curr.x+curr.y,l2)][curr.z].x)
			{
    			q[tail].x=max(0,curr.x+curr.y-l2);
	    		q[tail].y=min(curr.x+curr.y,l2);
		    	q[tail].z=curr.z;
			    q[tail].d=curr.d+1;
			    visited[q[tail].x][q[tail].y][q[tail].z].x=1;
			    //cout<<"-----------3"<<endl;
			    //cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
			    tail++;
			}
			if(!visited[curr.x][min(curr.y+curr.z,l2)][max(0,curr.y+curr.z-l2)].x)
			{
    			q[tail].x=curr.x;
	    		q[tail].y=min(curr.z+curr.y,l2);
		    	q[tail].z=max(0,curr.z+curr.y-l2);
			    q[tail].d=curr.d+1;
			    visited[q[tail].x][q[tail].y][q[tail].z].x=1;
		    	//cout<<"-----------4"<<endl;
			    //cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
	    		tail++;
	    	}
			
			
			if(!visited[max(0,curr.x+curr.z-l3)][curr.y][min(curr.x+curr.z,l3)].x)
			{
			    q[tail].x=max(0,curr.x+curr.z-l3);
    			q[tail].y=curr.y;
	    		q[tail].z=min(curr.x+curr.z,l3);
		    	q[tail].d=curr.d+1;
			    visited[q[tail].x][q[tail].y][q[tail].z].x=1;
			    //cout<<"-----------5"<<endl;
    			//cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
	    		tail++;
		    }
    		if(!visited[curr.x][max(curr.y+curr.z-l3,0)][min(curr.y+curr.z,l3)].x)
	    	{
    			q[tail].x=curr.x;
	    		q[tail].y=max(curr.y+curr.z-l3,0);
		    	q[tail].z=min(curr.y+curr.z,l3);
			    q[tail].d=curr.d+1;
    			visited[q[tail].x][q[tail].y][q[tail].z].x=1;
	    		//cout<<"-----------6"<<endl;
		    	//cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
			    tail++;
	    	}

		    if(!visited[0][curr.y][curr.z].x)
		    {
		        q[tail].x=0;
	    	    q[tail].y=curr.y;
    	    	q[tail].z=curr.z;
	        	q[tail].d=curr.d+1;
        		visited[q[tail].x][q[tail].y][q[tail].z].x=1;
    		    //cout<<"-----------7"<<endl;
		    	//cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
	    	    tail++;
    		}
			if(!visited[curr.x][0][curr.z].x)
			{
    			q[tail].x=curr.x;
	    		q[tail].y=0;
		       	q[tail].z=curr.z;
	    		q[tail].d=curr.d+1;
		    	visited[q[tail].x][q[tail].y][q[tail].z].x=1;
			    //cout<<"-----------8"<<endl;
    			//cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
	    		tail++;
    		}
			if(!visited[curr.x][curr.y][0].x)
			{
	    		q[tail].x=curr.x;
		    	q[tail].y=curr.y;
			    q[tail].z=0;
    			q[tail].d=curr.d+1;
	    		visited[q[tail].x][q[tail].y][q[tail].z].x=1;
		    	//cout<<"-----------9"<<endl;
			    //cout<<"-----------enqueued "<<"["<<q[tail].x<<","<<q[tail].y<<","<<q[tail].z<<"]"<<"at depth "<<q[tail].d<<endl;
		    	tail++;
		    }
	}

	int f;
	cin>>f;

	for(int i=0;i<f;i++){
		int a,b,c;
		cin>>a>>b>>c;

		if(visited[a][b][c].x&&a<=l1&&b<=l2&&c<=l3)
			cout<<visited[a][b][c].y<<endl;
		else
			cout<<"IMPOSSIBLE"<<endl;
	}

/*cout<<"----------------------------------------"<<endl;
		for(int i=0;i<l1+1;i++)
			for(int j=0;j<l2+1;j++)
				for(int k=0;k<l3+1;k++)
			cout<< visited[i][j][k]<<" ";
		cout<<endl;
cout<<"----------------------------------------"<<endl;*/
}

}